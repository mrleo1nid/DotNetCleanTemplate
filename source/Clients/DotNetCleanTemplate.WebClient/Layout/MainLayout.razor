@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject AuthenticationState AuthState
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => _drawerOpen = !_drawerOpen)" />
        <MudText Typo="Typo.h5" Class="ml-3">DotNetCleanTemplate</MudText>
        <MudSpacer />
        
        @if (AuthState.IsAuthenticated)
        {
            <MudText Typo="Typo.body2" Class="mr-4">
                @AuthState.UserName
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Logout" 
                           Color="Color.Inherit" 
                           OnClick="HandleLogout" />
        }
        
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
    </MudAppBar>
    
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
                Главная
            </MudNavLink>
            @if (_isAdmin)
            {
                <MudNavLink Href="/users" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People">
                    Пользователи
                </MudNavLink>
            }
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code 
{
    private bool _isDarkMode = true;
    private bool _drawerOpen = false;
    private bool _isAdmin = false;
    private MudTheme? _theme = null;

    protected override async Task OnInitializedAsync()
    {
        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };

        // Проверяем роль администратора
        if (AuthState.IsAuthenticated)
        {
            _isAdmin = await AuthService.HasRoleAsync("Admin");
        }
    }
    

    
    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        AuthState.SetUnauthenticated();
        Snackbar.Add("Вы успешно вышли из системы", Severity.Info);
        Navigation.NavigateTo("/login");
    }
    
    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}