@page "/users"
@using System.Net.Http.Json
@using DotNetCleanTemplate.Shared.Common
@using DotNetCleanTemplate.Shared.DTOs
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Пользователи</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudCard Elevation="3">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Список пользователей</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="LoadUsers"
                       Disabled="@_isLoading"
                       StartIcon="@Icons.Material.Filled.Refresh">
                Обновить
            </MudButton>
        </MudCardHeader>
        <MudCardContent>
            @if (_isLoading)
            {
                <MudProgressCircular Indeterminate="true" Class="d-flex justify-center" />
            }
            else if (_users != null && _users.Any())
            {
                <MudTable Items="@_users" Dense="true" Hover="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Email</MudTh>
                        <MudTh>Имя пользователя</MudTh>
                        <MudTh>Роли</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Email</MudTd>
                        <MudTd>@context.UserName</MudTd>
                        <MudTd>
                            @if (context.Roles != null && context.Roles.Any())
                            {
                                @foreach (var role in context.Roles)
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="ma-1">@role</MudText>
                                }
                            }
                            else
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Нет ролей</MudText>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                    Нет данных для отображения
                </MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool _isLoading = false;
    private List<UserWithRolesDto>? _users;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync("/users");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<List<UserWithRolesDto>>>();
                
                if (result?.IsSuccess == true)
                {
                    _users = result.Value;
                    Snackbar.Add("Пользователи загружены успешно", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Ошибка при загрузке пользователей", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add($"Ошибка HTTP: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
} 