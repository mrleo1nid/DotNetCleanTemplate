@page "/users"
@using System.Net.Http.Json
@using DotNetCleanTemplate.Shared.Common
@using DotNetCleanTemplate.Shared.DTOs
@using MediatR
@using MudBlazor
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Пользователи</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <!-- Секция пользователей -->
    <MudCard Elevation="3" Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Список пользователей</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="LoadUsers"
                       Disabled="@_isLoadingUsers"
                       StartIcon="@Icons.Material.Filled.Refresh">
                Обновить
            </MudButton>
        </MudCardHeader>
        <MudCardContent>
            @if (_isLoadingUsers)
            {
                <MudProgressCircular Indeterminate="true" Class="d-flex justify-center" />
            }
            else if (_users != null && _users.Any())
            {
                <MudTable Items="@_users" Dense="true" Hover="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Email</MudTh>
                        <MudTh>Имя пользователя</MudTh>
                        <MudTh>Роли</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Email</MudTd>
                        <MudTd>@context.UserName</MudTd>
                        <MudTd>
                            @if (context.Roles != null && context.Roles.Any())
                            {
                                <div>
                                    @foreach (var role in context.Roles)
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Primary" Class="ma-1">@role.Name</MudText>
                                    }
                                </div>
                            }
                            else
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Нет ролей</MudText>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                @if (_totalUserPages > 1)
                {
                    <MudPagination Count="@_totalUserPages" 
                                   Selected="@_currentUserPage"
                                   SelectedChanged="@OnUserPageChanged" 
                                   Class="mt-4" />
                }
            }
            else
            {
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                    Нет данных для отображения
                </MudText>
            }
        </MudCardContent>
    </MudCard>

    <!-- Секция ролей -->
    <MudCard Elevation="3">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Список ролей в системе</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Success" 
                       OnClick="OpenCreateRoleDialog"
                       StartIcon="@Icons.Material.Filled.Add">
                Добавить роль
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Secondary" 
                       OnClick="LoadRoles"
                       Disabled="@_isLoadingRoles"
                       StartIcon="@Icons.Material.Filled.Refresh">
                Обновить
            </MudButton>
        </MudCardHeader>
        <MudCardContent>
            @if (_isLoadingRoles)
            {
                <MudProgressCircular Indeterminate="true" Class="d-flex justify-center" />
            }
            else if (_roles != null && _roles.Any())
            {
                <MudTable Items="@_roles" Dense="true" Hover="true" Striped="true">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Название роли</MudTh>
                        <MudTh>Действия</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Id</MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>
                            @if (context.IsDefault)
                            {
                                <MudText Typo="Typo.caption" Color="Color.Info" Class="font-weight-bold">
                                    Дефолтная роль
                                </MudText>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Error" 
                                           Size="Size.Small"
                                           OnClick="@(() => OpenDeleteRoleDialog(context))"
                                           StartIcon="@Icons.Material.Filled.Delete">
                                    Удалить
                                </MudButton>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                
                @if (_totalRolePages > 1)
                {
                    <MudPagination Count="@_totalRolePages" 
                                   Selected="@_currentRolePage"
                                   SelectedChanged="@OnRolePageChanged" 
                                   Class="mt-4" />
                }
            }
            else
            {
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                    Нет ролей для отображения
                </MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool _isLoadingUsers = false;
    private bool _isLoadingRoles = false;
    private List<UserWithRolesDto>? _users;
    private List<RoleDto>? _roles;
    
    // Пейджинг для пользователей
    private int _currentUserPage = 1;
    private int _userPageSize = 10;
    private int _totalUserPages = 0;
    private int _totalUserCount = 0;
    
    // Пейджинг для ролей
    private int _currentRolePage = 1;
    private int _rolePageSize = 10;
    private int _totalRolePages = 0;
    private int _totalRoleCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadUsers(), LoadRoles());
    }

    private async Task LoadUsers()
    {
        _isLoadingUsers = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync($"/administration/users/paginated?page={_currentUserPage}&pageSize={_userPageSize}");
            await HandleUsersResponse(response);
        }
        catch (Exception ex)
        {
            HandleError(ex.Message);
        }
        finally
        {
            _isLoadingUsers = false;
            StateHasChanged();
        }
    }

    private async Task LoadRoles()
    {
        _isLoadingRoles = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync($"/administration/roles/paginated?page={_currentRolePage}&pageSize={_rolePageSize}");
            await HandleRolesResponse(response);
        }
        catch (Exception ex)
        {
            HandleError(ex.Message);
        }
        finally
        {
            _isLoadingRoles = false;
            StateHasChanged();
        }
    }

    // Методы для создания роли
    private async Task OpenCreateRoleDialog()
    {
        var parameters = new DialogParameters
        {
            ["IsLoading"] = false
        };

        var dialog = await DialogService.ShowAsync<CreateRoleDialog>("Создать новую роль", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is CreateRoleDto createRoleDto && createRoleDto != null)
        {
            await CreateRole(createRoleDto);
        }
    }

    private async Task CreateRole(CreateRoleDto createRoleDto)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/administration/roles", createRoleDto);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<RoleDto>>();
                if (result?.IsSuccess == true)
                {
                    Snackbar.Add("Роль успешно создана", Severity.Success);
                    // Возвращаемся на первую страницу после создания роли
                    _currentRolePage = 1;
                    await LoadRoles();
                }
                else
                {
                    var errorMessage = result?.Errors?.FirstOrDefault()?.Message ?? "Неизвестная ошибка";
                    Snackbar.Add($"Ошибка при создании роли: {errorMessage}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Ошибка HTTP: {response.StatusCode}. {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            HandleError($"Ошибка при создании роли: {ex.Message}");
        }
    }

    // Методы для удаления роли
    private async Task OpenDeleteRoleDialog(RoleDto role)
    {
        var parameters = new DialogParameters
        {
            ["RoleToDelete"] = role,
            ["IsLoading"] = false
        };

        var dialog = await DialogService.ShowAsync<DeleteRoleDialog>("Подтверждение удаления", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is RoleDto roleToDelete && roleToDelete != null)
        {
            await DeleteRole(roleToDelete);
        }
    }

    private async Task DeleteRole(RoleDto roleToDelete)
    {
        try
        {
            var response = await Http.DeleteAsync($"/administration/roles/{roleToDelete.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<Unit>>();
                if (result?.IsSuccess == true)
                {
                    Snackbar.Add("Роль успешно удалена", Severity.Success);
                    // Проверяем, нужно ли перейти на предыдущую страницу
                    if (_roles?.Count == 1 && _currentRolePage > 1)
                    {
                        _currentRolePage--;
                    }
                    await LoadRoles();
                }
                else
                {
                    var errorMessage = result?.Errors?.FirstOrDefault()?.Message ?? "Неизвестная ошибка";
                    Snackbar.Add($"Ошибка при удалении роли: {errorMessage}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Ошибка HTTP: {response.StatusCode}. {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            HandleError($"Ошибка при удалении роли: {ex.Message}");
        }
    }

    private async Task HandleUsersResponse(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            await HandleSuccessfulUsersResponse(response);
        }
        else
        {
            HandleHttpError(response.StatusCode);
        }
    }

    private async Task HandleRolesResponse(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            await HandleSuccessfulRolesResponse(response);
        }
        else
        {
            HandleHttpError(response.StatusCode);
        }
    }

    private void HandleHttpError(System.Net.HttpStatusCode statusCode)
    {
        Snackbar.Add($"Ошибка HTTP: {statusCode}", Severity.Error);
    }

    private void HandleError(string message)
    {
        Snackbar.Add($"Ошибка: {message}", Severity.Error);
    }

    private async Task HandleSuccessfulUsersResponse(HttpResponseMessage response)
    {
        var result = await response.Content.ReadFromJsonAsync<Result<PaginatedResultDto<UserWithRolesDto>>>();
        
        if (result?.IsSuccess == true)
        {
            _users = result.Value.Items;
            _totalUserCount = result.Value.TotalCount;
            _totalUserPages = result.Value.TotalPages;
            Snackbar.Add("Пользователи загружены успешно", Severity.Success);
        }
        else
        {
            Snackbar.Add("Ошибка при загрузке пользователей", Severity.Error);
        }
    }

    private async Task HandleSuccessfulRolesResponse(HttpResponseMessage response)
    {
        var result = await response.Content.ReadFromJsonAsync<Result<PaginatedResultDto<RoleDto>>>();
        
        if (result?.IsSuccess == true)
        {
            _roles = result.Value.Items;
            _totalRoleCount = result.Value.TotalCount;
            _totalRolePages = result.Value.TotalPages;
            Snackbar.Add("Роли загружены успешно", Severity.Success);
        }
        else
        {
            Snackbar.Add("Ошибка при загрузке ролей", Severity.Error);
        }
    }

    // Методы навигации для пользователей
    private async Task OnUserPageChanged(int page)
    {
        _currentUserPage = page;
        await LoadUsers();
    }

    // Методы навигации для ролей
    private async Task OnRolePageChanged(int page)
    {
        _currentRolePage = page;
        await LoadRoles();
    }
} 