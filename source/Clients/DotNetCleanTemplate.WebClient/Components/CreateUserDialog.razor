@using DotNetCleanTemplate.Shared.Common
@using DotNetCleanTemplate.Shared.DTOs
@using MudBlazor

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form">
            <MudContainer Style="max-width: 400px;">
                <MudText Typo="Typo.h6" Class="mb-4">Создать нового пользователя</MudText>
                
                <MudTextField @bind-Value="_createUserDto.UserName"
                             Label="Имя пользователя"
                             Required="true"
                             RequiredError="Имя пользователя обязательно"
                             Variant="Variant.Outlined"
                             Class="mb-3" />
                
                <MudTextField @bind-Value="_createUserDto.Email"
                             Label="Email"
                             Required="true"
                             RequiredError="Email обязателен"
                             Variant="Variant.Outlined"
                             InputType="InputType.Email"
                             Class="mb-3" />
                
                <MudTextField @bind-Value="_createUserDto.Password"
                             Label="Пароль"
                             Required="true"
                             RequiredError="Пароль обязателен"
                             Variant="Variant.Outlined"
                             InputType="InputType.Password"
                             Class="mb-3" />
                
                <MudTextField @bind-Value="_createUserDto.ConfirmPassword"
                             Label="Подтвердите пароль"
                             Required="true"
                             RequiredError="Подтверждение пароля обязательно"
                             Variant="Variant.Outlined"
                             InputType="InputType.Password"
                             Class="mb-3" />
                
                @if (!string.IsNullOrEmpty(_passwordError))
                {
                    <MudText Color="Color.Error" Typo="Typo.caption" Class="mb-3">
                        @_passwordError
                    </MudText>
                }
            </MudContainer>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="CreateUser"
                   Disabled="@(_isLoading)">
            @if (_isLoading)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Создать
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    
    private MudForm _form = default!;
    private bool _isLoading = false;
    private string _passwordError = string.Empty;
    
    private CreateUserDto _createUserDto = new()
    {
        UserName = string.Empty,
        Email = string.Empty,
        Password = string.Empty,
        ConfirmPassword = string.Empty
    };

    private async Task CreateUser()
    {
        await _form.Validate();
        
        if (!_form.IsValid)
        {
            return;
        }

        // Проверяем совпадение паролей
        if (_createUserDto.Password != _createUserDto.ConfirmPassword)
        {
            _passwordError = "Пароли не совпадают";
            return;
        }

        _passwordError = string.Empty;
        _isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync("/administration/users", _createUserDto);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<Guid>>();
                
                if (result?.IsSuccess ?? false)
                {
                    Snackbar.Add("Пользователь успешно создан", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMessage = result?.Errors?.FirstOrDefault()?.Message ?? "Неизвестная ошибка";
                    Snackbar.Add($"Ошибка при создании пользователя: {errorMessage}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Ошибка HTTP {response.StatusCode}: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
} 