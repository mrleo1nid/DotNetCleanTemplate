@using System.Net.Http.Json
@using DotNetCleanTemplate.Shared.Common
@using DotNetCleanTemplate.Shared.DTOs
@using MudBlazor
@using DotNetCleanTemplate.WebClient.Components

<MudCard Elevation="3" Class="mb-4">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Список пользователей</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Secondary" 
                   OnClick="OpenCreateUserDialog"
                   StartIcon="@Icons.Material.Filled.Add">
            Добавить пользователя
        </MudButton>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   OnClick="LoadUsers"
                   Disabled="@_isLoadingUsers"
                   StartIcon="@Icons.Material.Filled.Refresh">
            Обновить
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        @if (_isLoadingUsers)
        {
            <MudProgressCircular Indeterminate="true" Class="d-flex justify-center" />
        }
        else if (_users != null && _users.Any())
        {
            <MudTable Items="@_users" Dense="true" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>Email</MudTh>
                    <MudTh>Имя пользователя</MudTh>
                    <MudTh>Роли</MudTh>
                    <MudTh>Действия</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Email</MudTd>
                    <MudTd>@context.UserName</MudTd>
                    <MudTd>
                        @if (context.Roles != null && context.Roles.Any())
                        {
                            <div>
                                @foreach (var role in context.Roles)
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="ma-1">@role.Name</MudText>
                                }
                            </div>
                        }
                        else
                        {
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Нет ролей</MudText>
                        }
                    </MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Primary" 
                                   Size="Size.Small"
                                   OnClick="@(() => OpenChangePasswordDialog(context.Id, context.UserName))"
                                   StartIcon="@Icons.Material.Filled.Lock"
                                   Class="mr-2">
                            Изменить пароль
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Error" 
                                   Size="Size.Small"
                                   OnClick="@(() => DeleteUser(context.Id))"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@_isDeletingUser">
                            Удалить
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            
            @if (_totalUserPages > 1)
            {
                <MudPagination Count="@_totalUserPages" 
                               Selected="@_currentUserPage"
                               SelectedChanged="@OnUserPageChanged" 
                               Class="mt-4" />
            }
        }
        else
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                Нет данных для отображения
            </MudText>
        }
    </MudCardContent>
</MudCard>

@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    private bool _isLoadingUsers = false;
    private bool _isDeletingUser = false;
    private List<UserWithRolesDto>? _users;
    
    // Пейджинг для пользователей
    private int _currentUserPage = 1;
    private readonly int _userPageSize = 10;
    private int _totalUserPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _isLoadingUsers = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync($"/administration/users/paginated?page={_currentUserPage}&pageSize={_userPageSize}");
            await HandleUsersResponse(response);
        }
        catch (Exception ex)
        {
            HandleError(ex.Message);
        }
        finally
        {
            _isLoadingUsers = false;
            StateHasChanged();
        }
    }

    private async Task HandleUsersResponse(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            await HandleSuccessfulUsersResponse(response);
        }
        else
        {
            HandleHttpError(response.StatusCode);
        }
    }

    private void HandleHttpError(System.Net.HttpStatusCode statusCode)
    {
        Snackbar.Add($"Ошибка HTTP: {statusCode}", Severity.Error);
    }

    private void HandleError(string message)
    {
        Snackbar.Add($"Ошибка: {message}", Severity.Error);
    }

    private async Task HandleSuccessfulUsersResponse(HttpResponseMessage response)
    {
        var result = await response.Content.ReadFromJsonAsync<Result<PaginatedResultDto<UserWithRolesDto>>>();
        
        if (result?.IsSuccess == true && result.Value != null)
        {
            _users = result.Value.Items;
            _totalUserPages = result.Value.TotalPages;
            Snackbar.Add("Пользователи загружены успешно", Severity.Success);
        }
        else
        {
            Snackbar.Add("Ошибка при загрузке пользователей", Severity.Error);
        }
    }

    // Методы навигации для пользователей
    private async Task OnUserPageChanged(int page)
    {
        _currentUserPage = page;
        await LoadUsers();
    }

    private async Task OpenCreateUserDialog()
    {
        var parameters = new DialogParameters();
        var dialog = await DialogService.ShowAsync<CreateUserDialog>("Создать пользователя", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadUsers(); 
        }
    }

    private async Task OpenChangePasswordDialog(Guid userId, string userName)
    {
        var parameters = new DialogParameters
        {
            ["UserId"] = userId,
            ["UserName"] = userName
        };

        var dialog = await DialogService.ShowAsync<ChangePasswordDialog>("Изменить пароль", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            Snackbar.Add($"Пароль для пользователя {userName} успешно изменен", Severity.Success);
        }
    }

    private async Task DeleteUser(Guid userId)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Вы уверены, что хотите удалить этого пользователя?",
            ["ButtonText"] = "Удалить",
            ["Color"] = Color.Error
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Подтверждение удаления", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await PerformDeleteUser(userId);
        }
    }

    private async Task PerformDeleteUser(Guid userId)
    {
        _isDeletingUser = true;
        StateHasChanged();

        try
        {
            var response = await Http.DeleteAsync($"/administration/users/{userId}");
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пользователь успешно удален", Severity.Success);
                await LoadUsers(); // Перезагружаем список пользователей
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Ошибка при удалении пользователя: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isDeletingUser = false;
            StateHasChanged();
        }
    }
} 