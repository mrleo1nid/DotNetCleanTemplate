@using DotNetCleanTemplate.Shared.Common
@using DotNetCleanTemplate.Shared.DTOs
@using MediatR
@using MudBlazor
@using DotNetCleanTemplate.Client.Services

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: auto">
            <MudText Typo="Typo.h6" Class="mb-4">
                Управление ролями пользователя: @UserName
            </MudText>

            @if (_isLoading)
            {
                <MudProgressCircular Indeterminate="true" Class="d-flex justify-center" />
            }
            else
            {
                <MudGrid>
                    <!-- Текущие роли пользователя -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.subtitle1" Class="mb-2">Текущие роли:</MudText>
                        @if (_userRoles != null && _userRoles.Any())
                        {
                                                    <div class="d-flex flex-wrap gap-2">
                            @foreach (var role in _userRoles)
                            {
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Error" 
                                          Size="Size.Small"
                                          OnClick="@(() => RemoveRole(role))"
                                          Class="mr-2 mb-2">
                                    @role.Name
                                    @if (role.IsDefault)
                                    {
                                        <MudText Typo="Typo.caption" Class="ml-1">(Дефолтная)</MudText>
                                    }
                                    <MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Small" Class="ml-1" />
                                </MudButton>
                            }
                        </div>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Нет назначенных ролей</MudText>
                        }
                    </MudItem>

                    <!-- Доступные роли для назначения -->
                    <MudItem xs="12" Class="mt-4">
                        <MudText Typo="Typo.subtitle1" Class="mb-2">Доступные роли:</MudText>
                        @if (_availableRoles != null && _availableRoles.Any())
                        {
                                                    <div class="d-flex flex-wrap gap-2">
                            @foreach (var role in _availableRoles)
                            {
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Success" 
                                          Size="Size.Small"
                                          OnClick="@(() => AddRole(role))"
                                          Class="mr-2 mb-2">
                                    @role.Name
                                </MudButton>
                            }
                        </div>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Нет доступных ролей для назначения</MudText>
                        }
                    </MudItem>
                </MudGrid>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Info">Закрыть</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] private IUserService UserService { get; set; } = default!;
    [Inject] private IRoleService RoleService { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Guid UserId { get; set; }
    [Parameter] public string UserName { get; set; } = string.Empty;
    [Parameter] public EventCallback OnDialogClosed { get; set; }

    private bool _isLoading = true;
    private List<RoleDto>? _userRoles;
    private List<RoleDto>? _availableRoles;
    private List<RoleDto>? _allRoles;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            // Загружаем все роли
            var allRolesResult = await RoleService.GetAllRolesAsync();
            if (allRolesResult.IsSuccess && allRolesResult.Value != null)
            {
                _allRoles = allRolesResult.Value;
            }
            else
            {
                var errorMessage = allRolesResult.Errors.FirstOrDefault()?.Message ?? "Ошибка при загрузке ролей";
                Snackbar.Add(errorMessage, Severity.Error);
                _allRoles = new List<RoleDto>();
            }

            // Загружаем роли пользователя
            var userResult = await UserService.GetUserWithRolesAsync(UserId);
            if (userResult.IsSuccess && userResult.Value != null)
            {
                _userRoles = userResult.Value.Roles?.ToList() ?? new List<RoleDto>();
            }
            else
            {
                var errorMessage = userResult.Errors.FirstOrDefault()?.Message ?? "Ошибка при загрузке пользователя";
                Snackbar.Add(errorMessage, Severity.Error);
                _userRoles = new List<RoleDto>();
            }

            // Вычисляем доступные роли
            if (_allRoles != null)
            {
                _availableRoles = _allRoles.Where(r => !_userRoles.Any(ur => ur.Id == r.Id)).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при загрузке данных: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddRole(RoleDto role)
    {
        try
        {
            var assignRoleDto = new AssignRoleToUserDto
            {
                UserId = UserId,
                RoleId = role.Id
            };

            var result = await UserService.AssignRoleToUserAsync(UserId, assignRoleDto);
            
            if (result.IsSuccess)
            {
                Snackbar.Add($"Роль '{role.Name}' успешно назначена пользователю", Severity.Success);
                await LoadData(); // Перезагружаем данные
            }
            else
            {
                var errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Неизвестная ошибка";
                Snackbar.Add($"Ошибка при назначении роли: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при назначении роли: {ex.Message}", Severity.Error);
        }
    }

    private async Task RemoveRole(RoleDto role)
    {
        try
        {
            var result = await UserService.RemoveRoleFromUserAsync(UserId, role.Name);
            
            if (result.IsSuccess)
            {
                Snackbar.Add($"Роль '{role.Name}' успешно удалена у пользователя", Severity.Success);
                await LoadData(); // Перезагружаем данные
            }
            else
            {
                var errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Неизвестная ошибка";
                Snackbar.Add($"Ошибка при удалении роли: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при удалении роли: {ex.Message}", Severity.Error);
        }
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
        await OnDialogClosed.InvokeAsync();
    }
} 