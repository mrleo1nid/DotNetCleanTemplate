@using DotNetCleanTemplate.Shared.Common
@using DotNetCleanTemplate.Shared.DTOs
@using MediatR
@using MudBlazor
@using DotNetCleanTemplate.Client.Services

<MudCard Elevation="3">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Список ролей в системе</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Success" 
                   OnClick="OpenCreateRoleDialog"
                   StartIcon="@Icons.Material.Filled.Add"
                   Class="mr-2">
            Добавить роль
        </MudButton>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Info" 
                   OnClick="LoadRoles"
                   Disabled="@_isLoadingRoles"
                   StartIcon="@Icons.Material.Filled.Refresh">
            Обновить
        </MudButton>
    </MudCardHeader>
    <MudCardContent>
        @if (_isLoadingRoles)
        {
            <MudProgressCircular Indeterminate="true" Class="d-flex justify-center" />
        }
        else if (_roles != null && _roles.Any())
        {
            <MudTable Items="@_roles" Dense="true" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Название роли</MudTh>
                    <MudTh>Действия</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Id</MudTd>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>
                        @if (context.IsDefault)
                        {
                            <MudText Typo="Typo.caption" Color="Color.Info" Class="font-weight-bold">
                                Дефолтная роль
                            </MudText>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Error" 
                                       Size="Size.Small"
                                       OnClick="@(() => OpenDeleteRoleDialog(context))"
                                       StartIcon="@Icons.Material.Filled.Delete">
                                Удалить
                            </MudButton>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
            
            @if (_totalRolePages > 1)
            {
                <MudPagination Count="@_totalRolePages" 
                               Selected="@_currentRolePage"
                               SelectedChanged="@OnRolePageChanged" 
                               Class="mt-4" />
            }
        }
        else
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">
                Нет ролей для отображения
            </MudText>
        }
    </MudCardContent>
</MudCard>

@code {
    [Inject] private IRoleService RoleService { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    private bool _isLoadingRoles = false;
    private List<RoleDto>? _roles;
    
    // Пейджинг для ролей
    private int _currentRolePage = 1;
    private readonly int _rolePageSize = 10;
    private int _totalRolePages = 0;


    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        _isLoadingRoles = true;
        StateHasChanged();

        try
        {
            var result = await RoleService.GetRolesPaginatedAsync(_currentRolePage, _rolePageSize);
            
            if (result.IsSuccess && result.Value != null)
            {
                _roles = result.Value.Items;
                _totalRolePages = result.Value.TotalPages;
                Snackbar.Add("Роли загружены успешно", Severity.Success);
            }
            else
            {
                var errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Ошибка при загрузке ролей";
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingRoles = false;
            StateHasChanged();
        }
    }

    // Методы для создания роли
    private async Task OpenCreateRoleDialog()
    {
        var parameters = new DialogParameters
        {
            ["IsLoading"] = false
        };

        var dialog = await DialogService.ShowAsync<CreateRoleDialog>("Создать новую роль", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is CreateRoleDto createRoleDto)
        {
            await CreateRole(createRoleDto);
        }
    }

    private async Task CreateRole(CreateRoleDto createRoleDto)
    {
        try
        {
            var result = await RoleService.CreateRoleAsync(createRoleDto);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Роль успешно создана", Severity.Success);
                // Возвращаемся на первую страницу после создания роли
                _currentRolePage = 1;
                await LoadRoles();
            }
            else
            {
                var errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Неизвестная ошибка";
                Snackbar.Add($"Ошибка при создании роли: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при создании роли: {ex.Message}", Severity.Error);
        }
    }

    // Методы для удаления роли
    private async Task OpenDeleteRoleDialog(RoleDto role)
    {
        var parameters = new DialogParameters
        {
            ["RoleToDelete"] = role,
            ["IsLoading"] = false
        };

        var dialog = await DialogService.ShowAsync<DeleteRoleDialog>("Подтверждение удаления", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is RoleDto roleToDelete)
        {
            await DeleteRole(roleToDelete);
        }
    }

    private async Task DeleteRole(RoleDto roleToDelete)
    {
        try
        {
            var result = await RoleService.DeleteRoleAsync(roleToDelete.Id);
            
            if (result.IsSuccess)
            {
                Snackbar.Add("Роль успешно удалена", Severity.Success);
                // Проверяем, нужно ли перейти на предыдущую страницу
                if (_roles?.Count == 1 && _currentRolePage > 1)
                {
                    _currentRolePage--;
                }
                await LoadRoles();
            }
            else
            {
                var errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Неизвестная ошибка";
                Snackbar.Add($"Ошибка при удалении роли: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка при удалении роли: {ex.Message}", Severity.Error);
        }
    }



    // Методы навигации для ролей
    private async Task OnRolePageChanged(int page)
    {
        _currentRolePage = page;
        await LoadRoles();
    }
} 