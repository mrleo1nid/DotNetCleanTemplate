services:
  postgres:
    container_name: dotnetcleantemplate.postgres
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dotnetcleantemplate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: dotnetcleantemplate.redis
    image: redis:7-alpine
    ports:
      - "${REDIS_EXTERNAL_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - dotnetcleantemplate-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  dotnetcleantemplate.api:
    container_name: dotnetcleantemplate.api
    image: ${DOCKER_REGISTRY-}dotnetcleantemplateapi
    build:
      context: .
      dockerfile: DotNetCleanTemplate.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_CONNECTION_STRING=${REDIS_DOCKER_CONNECTION_STRING}
      - JWT_KEY=${JWT_KEY}
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - INIT_ADMIN_PASSWORD=${INIT_ADMIN_PASSWORD}
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dotnetcleantemplate-network

volumes:
  postgres_data:
  redis_data:

networks:
  dotnetcleantemplate-network:
    driver: bridge
    
